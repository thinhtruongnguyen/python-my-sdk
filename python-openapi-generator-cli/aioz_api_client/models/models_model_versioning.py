# coding: utf-8

"""
    AIOZ-AI-PLATFORM API

    API for AIOZ AI Platform

    The version of the OpenAPI document: 1.0
    Contact: support@swagger.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class ModelsModelVersioning(BaseModel):
    """
    ModelsModelVersioning
    """ # noqa: E501
    commit_hash: Optional[StrictStr] = None
    commit_message: Optional[StrictStr] = None
    created_at: Optional[StrictStr] = None
    dependency: Optional[Dict[str, Any]] = None
    id: Optional[StrictStr] = None
    input_format: Optional[Dict[str, Any]] = None
    model_id: Optional[StrictStr] = None
    node_reward: Optional[Union[StrictFloat, StrictInt]] = None
    output_format: Optional[Dict[str, Any]] = None
    platform: Optional[StrictStr] = None
    sys_require: Optional[Dict[str, Any]] = None
    test_result: Optional[Dict[str, Any]] = None
    updated_at: Optional[StrictStr] = None
    verify_status: Optional[StrictStr] = None
    verify_task_id: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["commit_hash", "commit_message", "created_at", "dependency", "id", "input_format", "model_id", "node_reward", "output_format", "platform", "sys_require", "test_result", "updated_at", "verify_status", "verify_task_id"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ModelsModelVersioning from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ModelsModelVersioning from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "commit_hash": obj.get("commit_hash"),
            "commit_message": obj.get("commit_message"),
            "created_at": obj.get("created_at"),
            "dependency": obj.get("dependency"),
            "id": obj.get("id"),
            "input_format": obj.get("input_format"),
            "model_id": obj.get("model_id"),
            "node_reward": obj.get("node_reward"),
            "output_format": obj.get("output_format"),
            "platform": obj.get("platform"),
            "sys_require": obj.get("sys_require"),
            "test_result": obj.get("test_result"),
            "updated_at": obj.get("updated_at"),
            "verify_status": obj.get("verify_status"),
            "verify_task_id": obj.get("verify_task_id")
        })
        return _obj


