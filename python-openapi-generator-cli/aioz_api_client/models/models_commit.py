# coding: utf-8

"""
    AIOZ-AI-PLATFORM API

    API for AIOZ AI Platform

    The version of the OpenAPI document: 1.0
    Contact: support@swagger.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from aioz_api_client.models.models_commit_meta import ModelsCommitMeta
from aioz_api_client.models.models_commit_stats import ModelsCommitStats
from aioz_api_client.models.models_repo_commit import ModelsRepoCommit
from aioz_api_client.models.models_user import ModelsUser
from typing import Optional, Set
from typing_extensions import Self

class ModelsCommit(BaseModel):
    """
    ModelsCommit
    """ # noqa: E501
    author: Optional[ModelsUser] = None
    commit_affected_files: Optional[List[StrictStr]] = None
    commit_data: Optional[ModelsUser] = None
    commit_meta: Optional[ModelsCommitMeta] = None
    parents: Optional[List[ModelsCommitMeta]] = None
    repo_commit: Optional[ModelsRepoCommit] = None
    stats: Optional[ModelsCommitStats] = None
    __properties: ClassVar[List[str]] = ["author", "commit_affected_files", "commit_data", "commit_meta", "parents", "repo_commit", "stats"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ModelsCommit from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of author
        if self.author:
            _dict['author'] = self.author.to_dict()
        # override the default output from pydantic by calling `to_dict()` of commit_data
        if self.commit_data:
            _dict['commit_data'] = self.commit_data.to_dict()
        # override the default output from pydantic by calling `to_dict()` of commit_meta
        if self.commit_meta:
            _dict['commit_meta'] = self.commit_meta.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in parents (list)
        _items = []
        if self.parents:
            for _item_parents in self.parents:
                if _item_parents:
                    _items.append(_item_parents.to_dict())
            _dict['parents'] = _items
        # override the default output from pydantic by calling `to_dict()` of repo_commit
        if self.repo_commit:
            _dict['repo_commit'] = self.repo_commit.to_dict()
        # override the default output from pydantic by calling `to_dict()` of stats
        if self.stats:
            _dict['stats'] = self.stats.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ModelsCommit from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "author": ModelsUser.from_dict(obj["author"]) if obj.get("author") is not None else None,
            "commit_affected_files": obj.get("commit_affected_files"),
            "commit_data": ModelsUser.from_dict(obj["commit_data"]) if obj.get("commit_data") is not None else None,
            "commit_meta": ModelsCommitMeta.from_dict(obj["commit_meta"]) if obj.get("commit_meta") is not None else None,
            "parents": [ModelsCommitMeta.from_dict(_item) for _item in obj["parents"]] if obj.get("parents") is not None else None,
            "repo_commit": ModelsRepoCommit.from_dict(obj["repo_commit"]) if obj.get("repo_commit") is not None else None,
            "stats": ModelsCommitStats.from_dict(obj["stats"]) if obj.get("stats") is not None else None
        })
        return _obj


