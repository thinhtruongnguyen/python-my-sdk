# coding: utf-8

"""
    AIOZ-AI-PLATFORM API

    API for AIOZ AI Platform

    The version of the OpenAPI document: 1.0
    Contact: support@swagger.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from aioz_api_client.models.models_follow import ModelsFollow
from aioz_api_client.models.models_member import ModelsMember
from aioz_api_client.models.models_offer import ModelsOffer
from aioz_api_client.models.models_wallet import ModelsWallet
from typing import Optional, Set
from typing_extensions import Self

class ModelsUser(BaseModel):
    """
    ModelsUser
    """ # noqa: E501
    allow_request_to_join: Optional[StrictBool] = None
    avatar_url: Optional[StrictStr] = None
    bio: Optional[StrictStr] = None
    blocked: Optional[StrictBool] = None
    blocked_at: Optional[StrictStr] = None
    email: Optional[StrictStr] = None
    followers: Optional[List[ModelsFollow]] = None
    followers_count: Optional[StrictInt] = None
    followings: Optional[List[ModelsFollow]] = None
    followings_count: Optional[StrictInt] = None
    github_link: Optional[StrictStr] = None
    github_name: Optional[StrictStr] = None
    home_page_name: Optional[StrictStr] = None
    id: Optional[StrictStr] = None
    interests: Optional[StrictStr] = None
    invite_offers: Optional[List[ModelsOffer]] = None
    invite_offers_count: Optional[StrictInt] = None
    is_following: Optional[StrictBool] = None
    join_id: Optional[StrictStr] = None
    join_offers: Optional[List[ModelsOffer]] = None
    join_offers_count: Optional[StrictInt] = None
    members: Optional[List[ModelsMember]] = None
    members_count: Optional[StrictInt] = None
    name: Optional[StrictStr] = None
    role: Optional[StrictStr] = None
    token: Optional[StrictStr] = None
    twitter_link: Optional[StrictStr] = None
    twitter_name: Optional[StrictStr] = None
    type: Optional[StrictStr] = None
    username: Optional[StrictStr] = None
    verified: Optional[StrictBool] = None
    visibility: Optional[StrictStr] = None
    wallet: Optional[ModelsWallet] = None
    wallet_address: Optional[StrictStr] = None
    wallet_connection: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["allow_request_to_join", "avatar_url", "bio", "blocked", "blocked_at", "email", "followers", "followers_count", "followings", "followings_count", "github_link", "github_name", "home_page_name", "id", "interests", "invite_offers", "invite_offers_count", "is_following", "join_id", "join_offers", "join_offers_count", "members", "members_count", "name", "role", "token", "twitter_link", "twitter_name", "type", "username", "verified", "visibility", "wallet", "wallet_address", "wallet_connection"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ModelsUser from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in followers (list)
        _items = []
        if self.followers:
            for _item_followers in self.followers:
                if _item_followers:
                    _items.append(_item_followers.to_dict())
            _dict['followers'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in followings (list)
        _items = []
        if self.followings:
            for _item_followings in self.followings:
                if _item_followings:
                    _items.append(_item_followings.to_dict())
            _dict['followings'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in invite_offers (list)
        _items = []
        if self.invite_offers:
            for _item_invite_offers in self.invite_offers:
                if _item_invite_offers:
                    _items.append(_item_invite_offers.to_dict())
            _dict['invite_offers'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in join_offers (list)
        _items = []
        if self.join_offers:
            for _item_join_offers in self.join_offers:
                if _item_join_offers:
                    _items.append(_item_join_offers.to_dict())
            _dict['join_offers'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in members (list)
        _items = []
        if self.members:
            for _item_members in self.members:
                if _item_members:
                    _items.append(_item_members.to_dict())
            _dict['members'] = _items
        # override the default output from pydantic by calling `to_dict()` of wallet
        if self.wallet:
            _dict['wallet'] = self.wallet.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ModelsUser from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "allow_request_to_join": obj.get("allow_request_to_join"),
            "avatar_url": obj.get("avatar_url"),
            "bio": obj.get("bio"),
            "blocked": obj.get("blocked"),
            "blocked_at": obj.get("blocked_at"),
            "email": obj.get("email"),
            "followers": [ModelsFollow.from_dict(_item) for _item in obj["followers"]] if obj.get("followers") is not None else None,
            "followers_count": obj.get("followers_count"),
            "followings": [ModelsFollow.from_dict(_item) for _item in obj["followings"]] if obj.get("followings") is not None else None,
            "followings_count": obj.get("followings_count"),
            "github_link": obj.get("github_link"),
            "github_name": obj.get("github_name"),
            "home_page_name": obj.get("home_page_name"),
            "id": obj.get("id"),
            "interests": obj.get("interests"),
            "invite_offers": [ModelsOffer.from_dict(_item) for _item in obj["invite_offers"]] if obj.get("invite_offers") is not None else None,
            "invite_offers_count": obj.get("invite_offers_count"),
            "is_following": obj.get("is_following"),
            "join_id": obj.get("join_id"),
            "join_offers": [ModelsOffer.from_dict(_item) for _item in obj["join_offers"]] if obj.get("join_offers") is not None else None,
            "join_offers_count": obj.get("join_offers_count"),
            "members": [ModelsMember.from_dict(_item) for _item in obj["members"]] if obj.get("members") is not None else None,
            "members_count": obj.get("members_count"),
            "name": obj.get("name"),
            "role": obj.get("role"),
            "token": obj.get("token"),
            "twitter_link": obj.get("twitter_link"),
            "twitter_name": obj.get("twitter_name"),
            "type": obj.get("type"),
            "username": obj.get("username"),
            "verified": obj.get("verified"),
            "visibility": obj.get("visibility"),
            "wallet": ModelsWallet.from_dict(obj["wallet"]) if obj.get("wallet") is not None else None,
            "wallet_address": obj.get("wallet_address"),
            "wallet_connection": obj.get("wallet_connection")
        })
        return _obj


