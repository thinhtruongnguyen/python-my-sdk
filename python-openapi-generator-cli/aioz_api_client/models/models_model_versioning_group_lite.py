# coding: utf-8

"""
    AIOZ-AI-PLATFORM API

    API for AIOZ AI Platform

    The version of the OpenAPI document: 1.0
    Contact: support@swagger.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from aioz_api_client.models.models_platform_task import ModelsPlatformTask
from typing import Optional, Set
from typing_extensions import Self

class ModelsModelVersioningGroupLite(BaseModel):
    """
    ModelsModelVersioningGroupLite
    """ # noqa: E501
    commit_hash: Optional[StrictStr] = Field(default=None, description="Dependency        map[string]interface{} `json:\"dependency\"`")
    commit_message: Optional[StrictStr] = Field(default=None, description="TestResult        map[string]interface{} `json:\"test_result\"` InputFormat       map[string]interface{} `json:\"input_format\"` OutputFormat      map[string]interface{} `json:\"output_format\"` SysRequired       map[string]interface{} `json:\"sys_require\"`")
    is_active: Optional[StrictBool] = None
    last_checked_at: Optional[StrictStr] = None
    model_id: Optional[StrictStr] = None
    pending_platforms: Optional[List[ModelsPlatformTask]] = None
    rejected_platforms: Optional[List[ModelsPlatformTask]] = None
    verified_platforms: Optional[List[ModelsPlatformTask]] = None
    verify_status: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["commit_hash", "commit_message", "is_active", "last_checked_at", "model_id", "pending_platforms", "rejected_platforms", "verified_platforms", "verify_status"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ModelsModelVersioningGroupLite from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in pending_platforms (list)
        _items = []
        if self.pending_platforms:
            for _item_pending_platforms in self.pending_platforms:
                if _item_pending_platforms:
                    _items.append(_item_pending_platforms.to_dict())
            _dict['pending_platforms'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in rejected_platforms (list)
        _items = []
        if self.rejected_platforms:
            for _item_rejected_platforms in self.rejected_platforms:
                if _item_rejected_platforms:
                    _items.append(_item_rejected_platforms.to_dict())
            _dict['rejected_platforms'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in verified_platforms (list)
        _items = []
        if self.verified_platforms:
            for _item_verified_platforms in self.verified_platforms:
                if _item_verified_platforms:
                    _items.append(_item_verified_platforms.to_dict())
            _dict['verified_platforms'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ModelsModelVersioningGroupLite from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "commit_hash": obj.get("commit_hash"),
            "commit_message": obj.get("commit_message"),
            "is_active": obj.get("is_active"),
            "last_checked_at": obj.get("last_checked_at"),
            "model_id": obj.get("model_id"),
            "pending_platforms": [ModelsPlatformTask.from_dict(_item) for _item in obj["pending_platforms"]] if obj.get("pending_platforms") is not None else None,
            "rejected_platforms": [ModelsPlatformTask.from_dict(_item) for _item in obj["rejected_platforms"]] if obj.get("rejected_platforms") is not None else None,
            "verified_platforms": [ModelsPlatformTask.from_dict(_item) for _item in obj["verified_platforms"]] if obj.get("verified_platforms") is not None else None,
            "verify_status": obj.get("verify_status")
        })
        return _obj


